generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  username       String   @unique
  password       String
  role           Role     @default(OPERATOR)
  programStudiId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  programStudi       ProgramStudi?  @relation(fields: [programStudiId], references: [id])
  documents          Document[]     @relation("UploadedDocuments") // ✅ relasi upload
  validatedDocuments Document[]     @relation("ValidatedDocuments") // ✅ relasi validasi
  comments           Comment[]
  activityLogs       ActivityLog[]
  Notification       Notification[]
}

enum Role {
  ADMINISTRATOR
  OPERATOR
  VALIDATOR
}

model ProgramStudi {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[] // Relasi ke User (operator/operator)
  chapters Chapter[]
}

model Chapter {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  programStudiId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  programStudi   ProgramStudi    @relation(fields: [programStudiId], references: [id])
  subChapters    SubChapter[]
  subSubChapters SubSubChapter[]
  documents      Document[]
}

model SubChapter {
  id          Int      @id @default(autoincrement())
  chapterId   Int
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter        Chapter         @relation(fields: [chapterId], references: [id])
  subSubChapters SubSubChapter[]
  documents      Document[]
}

model SubSubChapter {
  id           Int      @id @default(autoincrement())
  subChapterId Int
  chapterId    Int?
  title        String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subChapter SubChapter @relation(fields: [subChapterId], references: [id])
  chapter    Chapter?   @relation(fields: [chapterId], references: [id])
  documents  Document[]
}

model Document {
  id              Int            @id @default(autoincrement())
  chapterId       Int
  subChapterId    Int?           
  subSubChapterId Int?
  title           String
  description     String?
  filePath        String
  cloudinaryId    String?
  uploadedById    Int
  validatedBy     Int?
  status          DocumentStatus @default(PENDING)
  deletedAt       DateTime?      @map("deleted_at")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isDeleted       Boolean        @default(false)

  chapter         Chapter        @relation(fields: [chapterId], references: [id])
  subChapter      SubChapter?    @relation(fields: [subChapterId], references: [id]) // ✅ ubah juga
  subSubChapter   SubSubChapter? @relation(fields: [subSubChapterId], references: [id])
  uploadedBy      User           @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  validator       User?          @relation("ValidatedDocuments", fields: [validatedBy], references: [id])
  comments        Comment[]
  sharedLinks     SharedLink[]
}

enum DocumentStatus {
  VALID
  PENDING
  DITOLAK
}

model Comment {
  id            Int      @id @default(autoincrement())
  userId        Int
  documentId    Int
  activityLogId Int?
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id])
  document Document     @relation(fields: [documentId], references: [id])
  activity ActivityLog? @relation(fields: [activityLogId], references: [id])
}

model ActivityLog {
  id        Int       @id @default(autoincrement())
  userId    Int
  message   String
  status    LogStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  Comment Comment[]
}

enum LogStatus {
  INFO
  WARNING
  ERROR
}

model SharedLink {
  id         Int       @id @default(autoincrement())
  documentId Int
  token      String    @unique
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  document Document @relation(fields: [documentId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
